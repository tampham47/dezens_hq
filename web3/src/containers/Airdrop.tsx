import { Contract } from 'ethers';
import React, { useEffect, useState } from 'react';
import { useWalletClient } from 'wagmi';
import styled from 'styled-components';
import { Button } from '@mantine/core';
import { QRCodeCanvas } from 'qrcode.react';
import { Alert } from '@mantine/core';
import { IconAlertCircle } from '@tabler/icons-react';

import { contractConfig } from '../contracts';
import { LfxAirdrop, AirdropInfo } from '../apis/lfx-airdrop';

const ScMain = styled.div`
  margin-bottom: 6rem;

  p {
    line-height: 1.6;
  }
`;

const ScStack = styled.div`
  h3 {
    margin-top: 0;
  }

  @media screen and (min-width: 1260px) {
    display: flex;
    flex-direction: row-reverse;
  }
`;

const ScPersonal = styled.div`
  flex: 2;
  border-radius: 16px;
  background-color: #3f2e3e;
  color: #f1c93b;
  padding: 24px;
  margin-bottom: 1rem;
  overflow: hidden;
`;

const ScContent = styled.div`
  flex: 5;
  border-radius: 16px;
  background-color: #4e4feb;
  color: black;
  color: #f1c93b;
  padding: 24px;
  margin-bottom: 1rem;

  @media screen and (min-width: 1260px) {
    margin-right: 1rem;
  }
`;

const ScInfo = styled(ScContent)`
  flex: none;
  margin-right: 0;
`;

const ScSection = styled.div`
  margin-bottom: 4rem;
`;

const ScBlock = styled.div`
  margin-bottom: 2rem;
`;

const ScQrCodeWrapper = styled.div`
  text-align: center;
  margin-top: 2rem;
  margin-bottom: 2rem;
`;
const ScQrCode = styled.div`
  display: inline-block;
  padding: 12px;
  border-radius: 8px;
  background: white;
`;

export const Airdrop = () => {
  const { data: walletClient } = useWalletClient();
  const [userDeposit, setUserDeposit] = useState<number>(0);
  const [airdropInfo, setAirdropInfo] = useState<AirdropInfo>();
  const [lfxToken, setLfxToken] = useState<Contract>();
  const [lfxAirdrop, setLfxAirdrop] = useState<Contract>();

  const withdraw = async () => {
    if (!lfxAirdrop || !lfxToken) return;

    try {
      await lfxAirdrop.withdraw();
    } catch (err) {
      console.log('err', err);
    }
  };

  useEffect(() => {
    if (!walletClient) return;

    const lfx = new Contract(
      contractConfig.Lfx.Token,
      contractConfig.ArtifactLfx.abi,
      walletClient as any
    );

    const airdrop = new Contract(
      contractConfig.LfxAirdrop.Token,
      contractConfig.ArtifactLfxAirdrop.abi,
      walletClient as any
    );

    (window as any).lfx = lfx;
    (window as any).lfxAirdrop = airdrop;

    setLfxToken(lfx);
    setLfxAirdrop(airdrop);
  }, [walletClient]);

  useEffect(() => {
    if (!walletClient) return;

    (async () => {
      const balance = await LfxAirdrop.balanceOf(walletClient?.account.address);
      setUserDeposit(balance);
    })();
  }, [walletClient]);

  useEffect(() => {
    (async () => {
      const info = await LfxAirdrop.getInformation();
      setAirdropInfo(info);
    })();
  }, []);

  return (
    <ScMain>
      <ScStack>
        <ScPersonal>
          <ScSection>
            <h3>Your LFX Airdrop</h3>
            <ScBlock>
              <p>S·ªë FTM c·ªßa b·∫°n: {userDeposit}FTM</p>
              <p>
                S·ªë LFX ∆∞·ªõc t√≠nh nh·∫≠n ƒë∆∞·ª£c:{' '}
                {userDeposit * (airdropInfo?.estLfxReceivePerFtm || 0)}LFX
              </p>
            </ScBlock>
            <ScBlock>
              <Button
                variant="light"
                color="orange"
                radius="xl"
                size="lg"
                disabled={!airdropInfo?.isWithdrawable}
                onClick={withdraw}
                style={{ minWidth: 240 }}
              >
                Withdraw
              </Button>
            </ScBlock>
          </ScSection>
        </ScPersonal>
        <ScContent>
          <ScSection>
            <h3>Tham gia Airdrop</h3>

            {airdropInfo?.isWithdrawable ? (
              <Alert
                icon={<IconAlertCircle size="1rem" />}
                title="Warning!"
                color="orange" variant="filled"
              >
                The Airdrop is finished, new transfers will be rejected. It's
                time to withdraw.
              </Alert>
            ) : null}
            <ScBlock>
              <ScQrCodeWrapper>
                <ScQrCode>
                  <QRCodeCanvas
                    value={contractConfig.LfxAirdrop.Token}
                    size={240}
                  />
                </ScQrCode>
              </ScQrCodeWrapper>
              <p>
                üçç Contract Address:{' '}
                <code>{contractConfig.LfxAirdrop.Token}</code>
              </p>
              <p>
                üçç Ch·ªâ deposit FTM - Fantom, vi·ªác chuy·ªÉn b·∫•t k·ª≥ token kh√°c s·∫Ω
                kh√¥ng ƒë∆∞·ª£c ghi nh·∫≠n.
              </p>
              <p>
                üçç ƒê·ªÉ nh·∫≠n LFX Airdrop b·∫°n c·∫ßn chuy·ªÉn FTM - Fantom v√†o ƒë·ªãa ch·ªâ
                v√≠ c·ªßa smartcontact. S·ªë l∆∞·ª£ng FTM s·∫Ω ƒë∆∞·ª£c ho√†n tr·∫£ cho b·∫°n sau
                khi qu√° tr√¨nh airdrop k·∫øt th√∫c. Vi·ªác deposit FTM ƒë·ªÉ gi·∫£m thi·ªÉu
                vi·ªác gian l·∫≠n trong qu√° tr√¨nh nh·∫≠n Airdrop.
              </p>
              <p>
                üçç M·ªói v√≠ ch·ªâ ƒë∆∞·ª£c deposit FTM m·ªôt l·∫ßn, s·ªë l∆∞·ª£ng FTM n·∫±m trong [
                {airdropInfo?.minDepositAmount}, {airdropInfo?.maxDepositAmount}
                ]. H·ªá th·ªëng s·∫Ω kh√¥ng ch·∫•p nh·∫≠n vi·ªác deposit v∆∞·ª£t qu√° gi·ªõi h·∫°n
                n√†y.
              </p>
              <p>
                üçç Airdrop s·∫Ω ho√†n th√†nh khi c√≥ {airdropInfo?.maxParticipant}{' '}
                ng∆∞·ªùi tham gia, ho·∫∑c c√≥ {airdropInfo?.maxTotalSupply}FTM ƒë∆∞·ª£c
                deposit. Sau ƒë√≥ ng∆∞·ªùi d√πng s·∫Ω ƒë∆∞·ª£c ph√©p r√∫t LFX c≈©ng nh∆∞ FTM v·ªÅ
                v√≠ c·ªßa m√¨nh.
              </p>
            </ScBlock>
          </ScSection>
        </ScContent>
      </ScStack>

      <ScInfo>
        <ScBlock>
          <h4>T·ªïng quan LFX Airdrop</h4>

          <p>T·ªïng LFX token ƒë∆∞·ª£c airdrop: {airdropInfo?.balanceLfxToken}LFX</p>
          <p>
            T·ªïng FTM ƒë√£ ƒë∆∞·ª£c deposit v√†o smartcontract:{' '}
            {airdropInfo?.totalSupply}FTM
          </p>
          <p>
            S·ªë l∆∞·ª£ng FLX nh·∫≠n ƒë∆∞·ª£c cho m·ªói FTM:{' '}
            {airdropInfo?.estLfxReceivePerFtm || 0}LFX
          </p>
          <p>S·ªë l∆∞·ª£ng ng∆∞·ªùi tham gia: {airdropInfo?.participantCount}</p>
          <p>
            Tr·∫°ng th√°i:{' '}
            {airdropInfo?.isWithdrawable ? 'B·∫Øt ƒë·∫ßu r√∫t LFX' : 'ƒêang ti·∫øp t·ª•c'}
          </p>
          <p>Th√¥ng tin smartcontract, test cases ƒë·ªÉ audit smartcontract</p>
        </ScBlock>
      </ScInfo>
    </ScMain>
  );
};
